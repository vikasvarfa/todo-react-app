{"version":3,"sources":["components/todoreact/todo.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","inputdata","setInputData","useState","items","setItems","getLocalData","lists","localStorage","getItem","JSON","parse","isEditItem","setIsEditItem","toggleButton","setToggleButton","addItem","map","curElem","id","name","myNewInputData","Date","getTime","toString","alert","useEffect","setItem","stringify","_jsx","_Fragment","children","className","_jsxs","src","alt","type","placeholder","value","onChange","event","target","onClick","index","item_todo_edited","find","editItem","updatedItems","filter","deleteItem","removeAll","App","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"wJAmIeA,MArHFA,KACX,MAAOC,EAAWC,GAAgBC,mBAAS,KACpCC,EAAOC,GAAYF,mBAZPG,MACnB,MAAMC,EAAQC,aAAaC,QAAQ,cAEnC,OAAIF,EACKG,KAAKC,MAAMJ,GAEX,EACT,EAKmCD,KAC5BM,EAAYC,GAAiBV,mBAAS,KACtCW,EAAcC,GAAmBZ,oBAAS,GAG3Ca,EAAUA,KACd,GAAKf,EAEE,GAAIA,GAAaa,EACtBT,EACED,EAAMa,KAAKC,GACLA,EAAQC,KAAOP,EACV,IAAKM,EAASE,KAAMnB,GAEtBiB,KAIXhB,EAAa,IACbW,EAAc,MACdE,GAAgB,OACX,CACL,MAAMM,EAAiB,CACrBF,IAAI,IAAIG,MAAOC,UAAUC,WACzBJ,KAAMnB,GAERI,EAAS,IAAID,EAAOiB,IACpBnB,EAAa,GACf,MArBEuB,MAAM,uBAqBR,EA+BF,OAJAC,qBAAU,KACRlB,aAAamB,QAAQ,aAAcjB,KAAKkB,UAAUxB,GAAO,GACxD,CAACA,IAGFyB,cAAAC,WAAA,CAAAC,SACEF,cAAA,OAAKG,UAAU,WAAUD,SACvBE,eAAA,OAAKD,UAAU,YAAWD,SAAA,CACxBE,eAAA,UAAAF,SAAA,CACEF,cAAA,OAAKK,IAAI,oBAAoBC,IAAI,aACjCN,cAAA,cAAAE,SAAY,iCAEdE,eAAA,OAAKD,UAAU,WAAUD,SAAA,CACvBF,cAAA,SACEO,KAAK,OACLC,YAAY,kBACZL,UAAU,eACVM,MAAOrC,EACPsC,SAAWC,GAAUtC,EAAasC,EAAMC,OAAOH,SAEhDxB,EACCe,cAAA,KAAGG,UAAU,sBAAsBU,QAAS1B,IAE5Ca,cAAA,KAAGG,UAAU,qBAAqBU,QAAS1B,OAI/Ca,cAAA,OAAKG,UAAU,YAAWD,SACvB3B,EAAMa,KAAKC,GAERe,eAAA,OAAKD,UAAU,WAAUD,SAAA,CACvBF,cAAA,MAAAE,SAAKb,EAAQE,OACba,eAAA,OAAKD,UAAU,WAAUD,SAAA,CACvBF,cAAA,KACEG,UAAU,sBACVU,QAASA,IA1DXC,KAChB,MAAMC,EAAmBxC,EAAMyC,MAAM3B,GAC5BA,EAAQC,KAAOwB,IAExBzC,EAAa0C,EAAiBxB,MAC9BP,EAAc8B,GACd5B,GAAgB,EAAK,EAoDY+B,CAAS5B,EAAQC,MAClCU,cAAA,KACEG,UAAU,2BACVU,QAASA,IAnDTC,KAClB,MAAMI,EAAe3C,EAAM4C,QAAQ9B,GAC1BA,EAAQC,KAAOwB,IAExBtC,EAAS0C,EAAa,EA+CWE,CAAW/B,EAAQC,WARTD,EAAQC,QAgB7CU,cAAA,OAAKG,UAAU,YAAWD,SACxBF,cAAA,UACEG,UAAU,eACV,oBAAkB,aAClBU,QAvDMQ,KAChB7C,EAAS,GAAG,EAsDiB0B,SACnBF,cAAA,QAAAE,SAAM,0BAKb,ECnHQoB,MARHA,IAERtB,cAAAC,WAAA,CAAAC,SACEF,cAAC7B,EAAI,MCKIoD,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,EAAY,GAExB,ECHFS,IAASC,OACPlC,cAAAC,WAAA,CAAAC,SACEF,cAACsB,EAAG,MAENa,SAASC,eAAe,SAM1Bb,G","file":"static/js/main.cb89de53.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./style.css\";\n\n// get the localStorage data back\nconst getLocalData = () => {\n  const lists = localStorage.getItem(\"mytodolist\");\n\n  if (lists) {\n    return JSON.parse(lists);\n  } else {\n    return [];\n  }\n};\n\nconst Todo = () => {\n  const [inputdata, setInputData] = useState(\"\");\n  const [items, setItems] = useState(getLocalData());\n  const [isEditItem, setIsEditItem] = useState(\"\");\n  const [toggleButton, setToggleButton] = useState(false);\n\n  // add the items fucnction\n  const addItem = () => {\n    if (!inputdata) {\n      alert(\"Please fill the data\");\n    } else if (inputdata && toggleButton) {\n      setItems(\n        items.map((curElem) => {\n          if (curElem.id === isEditItem) {\n            return { ...curElem, name: inputdata };\n          }\n          return curElem;\n        })\n      );\n\n      setInputData(\"\");\n      setIsEditItem(null);\n      setToggleButton(false);\n    } else {\n      const myNewInputData = {\n        id: new Date().getTime().toString(),\n        name: inputdata,\n      };\n      setItems([...items, myNewInputData]);\n      setInputData(\"\");\n    }\n  };\n\n  //edit the items\n  const editItem = (index) => {\n    const item_todo_edited = items.find((curElem) => {\n      return curElem.id === index;\n    });\n    setInputData(item_todo_edited.name);\n    setIsEditItem(index);\n    setToggleButton(true);\n  };\n\n  // how to delete items section\n  const deleteItem = (index) => {\n    const updatedItems = items.filter((curElem) => {\n      return curElem.id !== index;\n    });\n    setItems(updatedItems);\n  };\n\n  // remove all the elements\n  const removeAll = () => {\n    setItems([]);\n  };\n\n  // adding localStorage\n  useEffect(() => {\n    localStorage.setItem(\"mytodolist\", JSON.stringify(items));\n  }, [items]);\n\n  return (\n    <>\n      <div className=\"main-div\">\n        <div className=\"child-div\">\n          <figure>\n            <img src=\"./images/todo.svg\" alt=\"todologo\" />\n            <figcaption>Add Your List Here ✌</figcaption>\n          </figure>\n          <div className=\"addItems\">\n            <input\n              type=\"text\"\n              placeholder=\"✍ Add Item\"\n              className=\"form-control\"\n              value={inputdata}\n              onChange={(event) => setInputData(event.target.value)}\n            />\n            {toggleButton ? (\n              <i className=\"far fa-edit add-btn\" onClick={addItem}></i>\n            ) : (\n              <i className=\"fa fa-plus add-btn\" onClick={addItem}></i>\n            )}\n          </div>\n          {/* show our items  */}\n          <div className=\"showItems\">\n            {items.map((curElem) => {\n              return (\n                <div className=\"eachItem\" key={curElem.id}>\n                  <h3>{curElem.name}</h3>\n                  <div className=\"todo-btn\">\n                    <i\n                      className=\"far fa-edit add-btn\"\n                      onClick={() => editItem(curElem.id)}></i>\n                    <i\n                      className=\"far fa-trash-alt add-btn\"\n                      onClick={() => deleteItem(curElem.id)}></i>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n\n          {/* rmeove all button  */}\n          <div className=\"showItems\">\n            <button\n              className=\"btn effect04\"\n              data-sm-link-text=\"Remove All\"\n              onClick={removeAll}>\n              <span> CHECK LIST</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Todo;\n","import React from \"react\";\nimport Todo from \"./components/todoreact/todo\";\n\n\nconst App = () => {\n  return (\n    <>\n      <Todo />\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}